---
description: Workflow guidelines and task management procedures
globs:
alwaysApply: true
---

# Workflow Guidelines

## First Step for Any Task

- Before starting work on any task, always check the `.cursor/rules` directory for relevant guidance
- These documents contain established workflows, conventions, and requirements for different aspects of the project
- Following these rule files will ensure consistency and reduce rework
- If multiple rule files seem relevant, review all of them before proceeding

## Last Step for Any Task

- If you've learned new concepts, workflows, or best practices during task completion, suggest updates to the relevant rules
- For new workflows that aren't covered by existing rules, suggest creating a new rule file
- **Create a changeset if your changes are worth mentioning in the changelog:**
  - Run `pnpm changeset` for new features, bug fixes, or breaking changes
  - See `090-changesets.mdc` for detailed guidelines on when and how to create changesets
  - Skip changesets for refactoring, formatting, or internal changes
- Evaluate whether tests should be added for your changes:
  - For functional code, new features, API changes, or bug fixes, tests are essential
  - For content-only changes like frontend changes or documentation updates, tests are typically not required
  - When in doubt, err on the side of adding tests - they provide long-term stability and prevent regressions
- Always run appropriate linting and formatting before considering a task complete:

  - Commands must be run from the root of the monorepo

  ```bash
  pnpm lint:fix
  pnpm format:fix
  ```

- Verify that no regressions are introduced by your changes

## Available Rules

The following rules are available in the `.cursor/rules` directory:

### Core Project Rules

- **010-workflow.mdc** - Workflow guidelines and task management procedures
- **020-codebase-structure.mdc** - Project structure, commands, and development setup
- **030-coding-style.mdc** - Coding standards and style guidelines for all technologies
- **040-logging.mdc** - Logging guidelines for implementing structured logging
- **050-tauri-version.mdc** - Tauri v2 version enforcement and dependency management
- **060-tailwind-v4.mdc** - Guidelines for using Tailwind CSS v4
- **070-comments-defensive-programming.mdc** - Comments and defensive programming guidelines
- **080-ai-interaction.mdc** - AI interaction guidelines and communication style rules
- **090-changesets.mdc** - Changeset management for features and fixes

### Special Rules

- **999-mdc-format.mdc** - Guide for creating and maintaining MDC rule files

When working on specific aspects of the project, consult the relevant rules above to ensure compliance with established patterns and standards.
