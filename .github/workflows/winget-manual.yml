name: Manual WinGet Release

on:
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'Release tag to publish to WinGet (e.g., v0.5.0)'
        required: true
        type: string
      dry_run:
        description: 'Dry run mode (test without creating PR)'
        required: false
        default: false
        type: boolean

jobs:
  winget-publish:
    runs-on: windows-latest
    permissions:
      contents: read

    steps:
      - name: Validate release exists
        uses: actions/github-script@v7
        id: validate-release
        with:
          script: |
            const tag = '${{ inputs.release_tag }}';
            
            try {
              const { data: release } = await github.rest.repos.getReleaseByTag({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag: tag
              });
              
              console.log(`Found release: ${release.name} (${release.tag_name})`);
              console.log(`Published: ${release.published_at}`);
              console.log(`Draft: ${release.draft}`);
              console.log(`Assets: ${release.assets.length}`);
              
              if (release.draft) {
                core.setFailed(`Release ${tag} is still a draft. Only published releases can be sent to WinGet.`);
                return;
              }
              
              // List assets for debugging
              const exeAssets = release.assets.filter(asset => asset.name.endsWith('.exe'));
              console.log(`EXE assets found: ${exeAssets.map(a => a.name).join(', ')}`);
              
              if (exeAssets.length === 0) {
                core.setFailed(`No .exe assets found in release ${tag}. WinGet requires executable installers.`);
                return;
              }
              
              core.setOutput('release-validated', 'true');
              core.setOutput('release-name', release.name);
              core.setOutput('exe-count', exeAssets.length);
              
            } catch (error) {
              if (error.status === 404) {
                core.setFailed(`Release with tag "${tag}" not found. Please check the tag name.`);
              } else {
                core.setFailed(`Failed to fetch release: ${error.message}`);
              }
            }

      - name: Publish to WinGet
        if: steps.validate-release.outputs.release-validated == 'true'
        uses: vedantmgoyal9/winget-releaser@main
        with:
          identifier: Stormix.DeadlockModManager
          fork-user: stormix
          release-tag: ${{ inputs.release_tag }}
          max-versions-to-keep: 5
          token: ${{ secrets.WINGET_TOKEN }}
          dry-run: ${{ inputs.dry_run }}

      - name: Summary
        if: always()
        run: |
          echo "## Manual WinGet Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Release Tag:** \`${{ inputs.release_tag }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Dry Run Mode:** ${{ inputs.dry_run }}" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ steps.validate-release.outputs.release-validated }}" == "true" ]]; then
            echo "**Status:** ✅ Release validated successfully" >> $GITHUB_STEP_SUMMARY
            echo "**Release Name:** ${{ steps.validate-release.outputs.release-name }}" >> $GITHUB_STEP_SUMMARY
            echo "**EXE Assets:** ${{ steps.validate-release.outputs.exe-count }}" >> $GITHUB_STEP_SUMMARY
            
            if [[ "${{ inputs.dry_run }}" == "true" ]]; then
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "🧪 **Dry run completed** - No pull request was created" >> $GITHUB_STEP_SUMMARY
            else
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "🚀 **WinGet publication initiated** - Check for pull request in your winget-pkgs fork" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "**Status:** ❌ Release validation failed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Please check the workflow logs for details." >> $GITHUB_STEP_SUMMARY
          fi

