name: Release Desktop App
env:
  NODE_VERSION: "24.8.0"

on:
  workflow_dispatch:
  push:
    tags:
      - "*"

jobs:
  create-release:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create-release.outputs.result }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Setup Node.js environment
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache-dependency-path: pnpm-lock.yaml
      - uses: pnpm/action-setup@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Get version
        run: echo "PACKAGE_VERSION=$(node -p "require('./apps/desktop/package.json').version")" >> $GITHUB_ENV

      - name: Get previous release tag
        id: previous-tag
        run: |
          PREVIOUS_TAG=$(git tag --sort=-version:refname | grep -v "nightly" | grep -v "v${{ env.PACKAGE_VERSION }}" | head -1)
          echo "previous_tag=$PREVIOUS_TAG" >> $GITHUB_OUTPUT
          echo "Previous release tag: $PREVIOUS_TAG"

      - name: Generate release notes
        id: release-notes
        run: |
          RELEASE_NOTES=$(bun run scripts/generate-release-notes.ts "${{ env.PACKAGE_VERSION }}" "${{ steps.previous-tag.outputs.previous_tag }}")

          echo "release_notes<<EOF" >> $GITHUB_OUTPUT
          echo "$RELEASE_NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create or get existing release
        id: create-release
        uses: actions/github-script@v6
        env:
          RELEASE_BODY: ${{ steps.release-notes.outputs.release_notes }}
        with:
          script: |
            const tag = `v${process.env.PACKAGE_VERSION}`;
            const releaseBody = process.env.RELEASE_BODY;

            // First, try to get existing release by tag
            try {
              const { data: release } = await github.rest.repos.getReleaseByTag({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag: tag
              });
              
              console.log(`Found existing release: ${release.id}`);
              
              // Update the existing release with new body
              await github.rest.repos.updateRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: release.id,
                body: releaseBody
              });
              
              return release.id;
            } catch (error) {
              if (error.status === 404) {
                // Release doesn't exist, create a new one
                console.log(`Creating new release for tag: ${tag}`);
                const { data } = await github.rest.repos.createRelease({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  tag_name: tag,
                  name: `Release ${process.env.PACKAGE_VERSION}`,
                  body: releaseBody,
                  draft: true,
                  prerelease: false
                });
                return data.id;
              } else {
                // Re-throw if it's a different error
                throw error;
              }
            }

  build-tauri:
    needs: create-release
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        platform: [windows-latest, ubuntu-24.04]

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: apps/desktop -> apps/desktop/target

      - name: Setup Node.js environment
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache-dependency-path: pnpm-lock.yaml
      - uses: pnpm/action-setup@v4

      - name: Install apt dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-24.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.1-0=2.44.0-2 \
            libwebkit2gtk-4.1-dev=2.44.0-2 \
            libjavascriptcoregtk-4.1-0=2.44.0-2 \
            libjavascriptcoregtk-4.1-dev=2.44.0-2 \
            gir1.2-javascriptcoregtk-4.1=2.44.0-2 \
            gir1.2-webkit2-4.1=2.44.0-2 \
            libappindicator3-dev \
            librsvg2-dev \
            patchelf

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install dependencies
        run: pnpm install

      - name: Build the app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          VITE_API_URL: https://api.deadlockmods.app
          VITE_WEB_URL: https://deadlockmods.app
          VITE_GA_MEASUREMENT_ID: ${{ secrets.VITE_GA_MEASUREMENT_ID }}
        with:
          projectPath: ./apps/desktop
          releaseId: ${{ needs.create-release.outputs.release_id }}

  publish-release:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    needs: [create-release, build-tauri]

    steps:
      - name: Publish release
        id: publish-release
        uses: actions/github-script@v6
        env:
          release_id: ${{ needs.create-release.outputs.release_id }}
        with:
          script: |
            try {
              console.log(`Updating release ID: ${process.env.release_id}`);
              
              // First get the current release to check its state
              const { data: currentRelease } = await github.rest.repos.getRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: process.env.release_id
              });
              
              console.log(`Current release state - Draft: ${currentRelease.draft}, Tag: ${currentRelease.tag_name}`);
              
              // Update the release to publish it
              const { data: updatedRelease } = await github.rest.repos.updateRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: process.env.release_id,
                draft: false,
                prerelease: false
              });
              
              console.log(`Successfully published release: ${updatedRelease.html_url}`);
              return updatedRelease.id;
            } catch (error) {
              console.error(`Failed to publish release: ${error.message}`);
              console.error(`Error details:`, error);
              throw error;
            }

  cleanup-release:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    needs: [create-release, build-tauri]
    if: failure()

    steps:
      - name: Delete release
        uses: actions/github-script@v6
        env:
          release_id: ${{ needs.create-release.outputs.release_id }}
        with:
          script: |
            github.rest.repos.deleteRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: process.env.release_id
            })
