/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as VpkAnalyzerRouteImport } from './routes/vpk-analyzer'
import { Route as TermsRouteImport } from './routes/terms'
import { Route as StatusRouteImport } from './routes/status'
import { Route as PrivacyRouteImport } from './routes/privacy'
import { Route as LoginRouteImport } from './routes/login'
import { Route as KvParserRouteImport } from './routes/kv-parser'
import { Route as DownloadRouteImport } from './routes/download'
import { Route as DocsRouteImport } from './routes/docs'
import { Route as DiscordRouteImport } from './routes/discord'
import { Route as SplatRouteImport } from './routes/$'
import { Route as IndexRouteImport } from './routes/index'
import { Route as DownloadIndexRouteImport } from './routes/download/index'
import { Route as DownloadWindowsRouteImport } from './routes/download/windows'
import { Route as DownloadLinuxRouteImport } from './routes/download/linux'
import { Route as AuthDesktopCallbackRouteImport } from './routes/auth/desktop-callback'

const VpkAnalyzerRoute = VpkAnalyzerRouteImport.update({
  id: '/vpk-analyzer',
  path: '/vpk-analyzer',
  getParentRoute: () => rootRouteImport,
} as any)
const TermsRoute = TermsRouteImport.update({
  id: '/terms',
  path: '/terms',
  getParentRoute: () => rootRouteImport,
} as any)
const StatusRoute = StatusRouteImport.update({
  id: '/status',
  path: '/status',
  getParentRoute: () => rootRouteImport,
} as any)
const PrivacyRoute = PrivacyRouteImport.update({
  id: '/privacy',
  path: '/privacy',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const KvParserRoute = KvParserRouteImport.update({
  id: '/kv-parser',
  path: '/kv-parser',
  getParentRoute: () => rootRouteImport,
} as any)
const DownloadRoute = DownloadRouteImport.update({
  id: '/download',
  path: '/download',
  getParentRoute: () => rootRouteImport,
} as any)
const DocsRoute = DocsRouteImport.update({
  id: '/docs',
  path: '/docs',
  getParentRoute: () => rootRouteImport,
} as any)
const DiscordRoute = DiscordRouteImport.update({
  id: '/discord',
  path: '/discord',
  getParentRoute: () => rootRouteImport,
} as any)
const SplatRoute = SplatRouteImport.update({
  id: '/$',
  path: '/$',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const DownloadIndexRoute = DownloadIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DownloadRoute,
} as any)
const DownloadWindowsRoute = DownloadWindowsRouteImport.update({
  id: '/windows',
  path: '/windows',
  getParentRoute: () => DownloadRoute,
} as any)
const DownloadLinuxRoute = DownloadLinuxRouteImport.update({
  id: '/linux',
  path: '/linux',
  getParentRoute: () => DownloadRoute,
} as any)
const AuthDesktopCallbackRoute = AuthDesktopCallbackRouteImport.update({
  id: '/auth/desktop-callback',
  path: '/auth/desktop-callback',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/$': typeof SplatRoute
  '/discord': typeof DiscordRoute
  '/docs': typeof DocsRoute
  '/download': typeof DownloadRouteWithChildren
  '/kv-parser': typeof KvParserRoute
  '/login': typeof LoginRoute
  '/privacy': typeof PrivacyRoute
  '/status': typeof StatusRoute
  '/terms': typeof TermsRoute
  '/vpk-analyzer': typeof VpkAnalyzerRoute
  '/auth/desktop-callback': typeof AuthDesktopCallbackRoute
  '/download/linux': typeof DownloadLinuxRoute
  '/download/windows': typeof DownloadWindowsRoute
  '/download/': typeof DownloadIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/$': typeof SplatRoute
  '/discord': typeof DiscordRoute
  '/docs': typeof DocsRoute
  '/kv-parser': typeof KvParserRoute
  '/login': typeof LoginRoute
  '/privacy': typeof PrivacyRoute
  '/status': typeof StatusRoute
  '/terms': typeof TermsRoute
  '/vpk-analyzer': typeof VpkAnalyzerRoute
  '/auth/desktop-callback': typeof AuthDesktopCallbackRoute
  '/download/linux': typeof DownloadLinuxRoute
  '/download/windows': typeof DownloadWindowsRoute
  '/download': typeof DownloadIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/$': typeof SplatRoute
  '/discord': typeof DiscordRoute
  '/docs': typeof DocsRoute
  '/download': typeof DownloadRouteWithChildren
  '/kv-parser': typeof KvParserRoute
  '/login': typeof LoginRoute
  '/privacy': typeof PrivacyRoute
  '/status': typeof StatusRoute
  '/terms': typeof TermsRoute
  '/vpk-analyzer': typeof VpkAnalyzerRoute
  '/auth/desktop-callback': typeof AuthDesktopCallbackRoute
  '/download/linux': typeof DownloadLinuxRoute
  '/download/windows': typeof DownloadWindowsRoute
  '/download/': typeof DownloadIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/$'
    | '/discord'
    | '/docs'
    | '/download'
    | '/kv-parser'
    | '/login'
    | '/privacy'
    | '/status'
    | '/terms'
    | '/vpk-analyzer'
    | '/auth/desktop-callback'
    | '/download/linux'
    | '/download/windows'
    | '/download/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/$'
    | '/discord'
    | '/docs'
    | '/kv-parser'
    | '/login'
    | '/privacy'
    | '/status'
    | '/terms'
    | '/vpk-analyzer'
    | '/auth/desktop-callback'
    | '/download/linux'
    | '/download/windows'
    | '/download'
  id:
    | '__root__'
    | '/'
    | '/$'
    | '/discord'
    | '/docs'
    | '/download'
    | '/kv-parser'
    | '/login'
    | '/privacy'
    | '/status'
    | '/terms'
    | '/vpk-analyzer'
    | '/auth/desktop-callback'
    | '/download/linux'
    | '/download/windows'
    | '/download/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  SplatRoute: typeof SplatRoute
  DiscordRoute: typeof DiscordRoute
  DocsRoute: typeof DocsRoute
  DownloadRoute: typeof DownloadRouteWithChildren
  KvParserRoute: typeof KvParserRoute
  LoginRoute: typeof LoginRoute
  PrivacyRoute: typeof PrivacyRoute
  StatusRoute: typeof StatusRoute
  TermsRoute: typeof TermsRoute
  VpkAnalyzerRoute: typeof VpkAnalyzerRoute
  AuthDesktopCallbackRoute: typeof AuthDesktopCallbackRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/vpk-analyzer': {
      id: '/vpk-analyzer'
      path: '/vpk-analyzer'
      fullPath: '/vpk-analyzer'
      preLoaderRoute: typeof VpkAnalyzerRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/terms': {
      id: '/terms'
      path: '/terms'
      fullPath: '/terms'
      preLoaderRoute: typeof TermsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/status': {
      id: '/status'
      path: '/status'
      fullPath: '/status'
      preLoaderRoute: typeof StatusRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/privacy': {
      id: '/privacy'
      path: '/privacy'
      fullPath: '/privacy'
      preLoaderRoute: typeof PrivacyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/kv-parser': {
      id: '/kv-parser'
      path: '/kv-parser'
      fullPath: '/kv-parser'
      preLoaderRoute: typeof KvParserRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/download': {
      id: '/download'
      path: '/download'
      fullPath: '/download'
      preLoaderRoute: typeof DownloadRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/docs': {
      id: '/docs'
      path: '/docs'
      fullPath: '/docs'
      preLoaderRoute: typeof DocsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/discord': {
      id: '/discord'
      path: '/discord'
      fullPath: '/discord'
      preLoaderRoute: typeof DiscordRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/$': {
      id: '/$'
      path: '/$'
      fullPath: '/$'
      preLoaderRoute: typeof SplatRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/download/': {
      id: '/download/'
      path: '/'
      fullPath: '/download/'
      preLoaderRoute: typeof DownloadIndexRouteImport
      parentRoute: typeof DownloadRoute
    }
    '/download/windows': {
      id: '/download/windows'
      path: '/windows'
      fullPath: '/download/windows'
      preLoaderRoute: typeof DownloadWindowsRouteImport
      parentRoute: typeof DownloadRoute
    }
    '/download/linux': {
      id: '/download/linux'
      path: '/linux'
      fullPath: '/download/linux'
      preLoaderRoute: typeof DownloadLinuxRouteImport
      parentRoute: typeof DownloadRoute
    }
    '/auth/desktop-callback': {
      id: '/auth/desktop-callback'
      path: '/auth/desktop-callback'
      fullPath: '/auth/desktop-callback'
      preLoaderRoute: typeof AuthDesktopCallbackRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

interface DownloadRouteChildren {
  DownloadLinuxRoute: typeof DownloadLinuxRoute
  DownloadWindowsRoute: typeof DownloadWindowsRoute
  DownloadIndexRoute: typeof DownloadIndexRoute
}

const DownloadRouteChildren: DownloadRouteChildren = {
  DownloadLinuxRoute: DownloadLinuxRoute,
  DownloadWindowsRoute: DownloadWindowsRoute,
  DownloadIndexRoute: DownloadIndexRoute,
}

const DownloadRouteWithChildren = DownloadRoute._addFileChildren(
  DownloadRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  SplatRoute: SplatRoute,
  DiscordRoute: DiscordRoute,
  DocsRoute: DocsRoute,
  DownloadRoute: DownloadRouteWithChildren,
  KvParserRoute: KvParserRoute,
  LoginRoute: LoginRoute,
  PrivacyRoute: PrivacyRoute,
  StatusRoute: StatusRoute,
  TermsRoute: TermsRoute,
  VpkAnalyzerRoute: VpkAnalyzerRoute,
  AuthDesktopCallbackRoute: AuthDesktopCallbackRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
